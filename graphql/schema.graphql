"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    board(id: ID! @eq): Board @find
}

type Mutation {
    cardAdd(input: CardAddInput! @spread): Card! @create
    cardDelete(id: ID!): Card @delete
    cardUpdate(id: ID!, title: String): Card @update
    register(
        name: String! @rules(apply: ["required", "min:2"])
        email: String! @rules(apply: ["required", "email", "unique:users"])
        password: String! @rules(apply: ["required", "min:8"]) @hash
    ): User @create @event(dispatch: "Illuminate\\Auth\\Events\\Registered")
    login(email: String!, password: String!): User!
    logout: User @guard
}

type User {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!
    name: String!
    email: String!
    boards: [Board!]! @hasMany
    cards: [Card!]! @hasMany
}

type Board {
    id: ID!
    title: String!
    color: String!
    created_at: DateTime!
    updated_at: DateTime!
    lists: [CardList!]! @hasMany
    owner: User! @belongsTo
}

type Card {
    id: ID!
    title: String!
    order: Int!
    created_at: DateTime!
    updated_at: DateTime!
    owner: User! @belongsTo
    list: CardList! @belongsTo
}

type CardList {
    id: ID!
    title: String!
    created_at: DateTime!
    updated_at: DateTime!
    cards: [Card!]! @hasMany
    board: Board! @belongsTo
    board_id: ID!
}

input CardAddInput {
    title: String!
    order: Int!
    owner_id: ID!
    list_id: ID!
}
